import tkinter as tk
from tkinter import messagebox
import os
import configparser

class Form1(tk.Tk):
    def __init__(self, config_file='config.ini'):
        super().__init__()
        self.config_file = config_file
        self.load_config()

        self.title("Menu_2")
        self.overrideredirect(True)  # Remove window decorations
        self.configure(background=self.backgroundColor)

        # Create a frame for the menu bar with a fixed height
        self.menu_bar = tk.Frame(self, bg=self.menuBarColor, height=self.menuHeight)
        self.menu_bar.pack(fill=tk.X)

        self.populate_menu()

        # Adjust the window height to fit the menu bar and set starting position
        self.geometry(f"{self.menuWidth}x{self.menuHeight}+{self.start_x}+{self.start_y}")

    def load_config(self):
        config = configparser.ConfigParser()
        config.read(self.config_file)

        settings = config['Settings']
        self.rootFolder = settings['rootFolder']
        self.menuWidth = int(settings['MenuWidth'])
        self.menuHeight = int(settings['MenuHeight'])
        self.textSize = int(settings['TextSize'])
        self.start_x = int(settings['Start_X-Position'])
        self.start_y = int(settings['Start_Y-Position'])
        self.backgroundColor = settings['backgroundColor']
        self.menuBarColor = settings['menuBarColor']
        self.dropDownMenuTextColor = settings['menuBar_DropDownButton_TextColor']
        self.textColor = settings['textColor']
        self.textColor_Inactive = settings['textColor_Inactive']
        self.borderColor = settings['borderColor']

    def populate_menu(self):
        for item in os.listdir(self.rootFolder):
            item_path = os.path.join(self.rootFolder, item)
            if os.path.isdir(item_path):
                label = tk.Label(
                    self.menu_bar, 
                    text=item, 
                    bg=self.menuBarColor, 
                    fg=self.textColor,
                    font=("Helvetica", self.textSize)
                )
                label.pack(side=tk.LEFT, padx=5, pady=5)
                label.bind("<Button-1>", lambda e, p=item_path: self.open_directory(p))
            elif os.path.isfile(item_path):
                label = tk.Label(
                    self.menu_bar, 
                    text=item, 
                    bg=self.menuBarColor, 
                    fg=self.textColor,
                    font=("Helvetica", self.textSize)
                )
                label.pack(side=tk.LEFT, padx=5, pady=5)
                label.bind("<Button-1>", lambda e, p=item_path: self.open_file(p))

    def open_file(self, file_path):
        try:
            os.system(f"xdg-open {file_path}")
        except Exception as e:
            messagebox.showerror("Error", f"Unable to open file: {e}")

    def open_directory(self, dir_path):
        try:
            os.system(f"xdg-open {dir_path}")
        except Exception as e:
            messagebox.showerror("Error", f"Unable to open directory: {e}")

if __name__ == "__main__":
    app = Form1()
    app.mainloop()
